from datetime import datetime as dt

from aiogram.utils.markdown import hbold

from config import month_tuple, weekdays


async def generate_str(iterable, month: int, period) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∞ –∫–∞–∂–¥—ã–π
    –¥–µ–Ω—å –æ–± –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–∞—Ö –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—É–º–º–µ.
    """
    if period != 0:
        create_str: str = (
            f"\n{"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞"} "
            f"{hbold(month_tuple[month])}\n"
            f"{hbold("–ü–µ—Ä–∏–æ–¥:", period)}\n{'-' * 60}")
    else:
        create_str = f"{
            hbold("–ò—Ç–æ–≥ –∑–∞ ", month_tuple[month])
        }\n{60*"-"}"

    total_salary: float = 0
    total_hours: float = 0
    hours_overtime: float = 0

    for sal in iterable:
        if sal[0].period == period:
            total_salary += sal[0].earned
            hours_all_day = round(sal[0].base_hours + sal[0].overtime, 2)
            hours_overtime += sal[0].overtime

            total_hours += hours_all_day
            day, month, year = sal[0].date.split("/")

            weekday = dt(int(year), int(month), int(day)).weekday()
            create_str += (
                f"\n<b>–î–∞—Ç–∞ - {sal[0].date[:5]} ({weekdays[weekday]}) => "
                f"{round(hours_all_day, 2)} —á / "
                f"{sal[0].earned}‚ÇΩ</b>\n{'-' * 60}"
            )

        elif period == 0:
            total_salary += sal[0].earned
            hours_all_day = round(sal[0].base_hours + sal[0].overtime, 2)
            hours_overtime += sal[0].overtime

            total_hours += hours_all_day

    create_str += f"\n{hbold("–ò—Ç–æ–≥–æ –∏–º–µ–µ–º")} üíµüí¥üí∂üí∂üí∑\n" if period else "\n"
    create_str += f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ - {hbold(total_salary)}‚ÇΩ\n"
    create_str += f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤ - {hbold(total_hours)} —á\n"
    create_str += f"–ò–∑ –Ω–∏—Ö –¥–æ–ø —á–∞—Å–æ–≤ {hbold(hours_overtime)} —á \n"

    return create_str
