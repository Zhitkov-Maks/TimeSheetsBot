from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.utils.markdown import hbold

from config import menu
from crud.settings import write_settings, get_settings_user_by_id
from database import Settings
from states.state import SettingsState

settings_router = Router()


@settings_router.message(F.text == "/settings")
async def ask_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ settings."""
    get_data_user: Settings | None = await get_settings_user_by_id(
        message.from_user.id
    )

    if get_data_user is None:
        await state.update_data(chat_id=message.from_user.id)
        await state.update_data(update=False)
        await state.set_state(SettingsState.price)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É: ",
            reply_markup=ReplyKeyboardRemove(),
        )

    else:
        kb_list = [[KeyboardButton(text="yes"), KeyboardButton(text="no")]]
        keyword = ReplyKeyboardMarkup(
            keyboard=kb_list,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(SettingsState.change_settings)
        await message.answer(
            text=f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏èüîß\n"
                 f"---------------------------------------------------------\n"
                 f"–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å: {hbold(get_data_user.price)}‚ÇΩ\n"
                 f"–ü—Ä–∏–±–∞–≤–∫–∞ –∑–∞ –¥–æ–ø —á–∞—Å: {hbold(get_data_user.overtime)}‚ÇΩ\n"
                 f"---------------------------------------------------------\n"
                 f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?",
            parse_mode="HTML",
            reply_markup=keyword
        )


@settings_router.message(
    (F.text.lower() == "yes") | (F.text.lower() == "no"),
    SettingsState.change_settings
)
async def change_settings(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã yes and no, –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞
    –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
    if message.text == "yes":
        await state.update_data(chat_id=message.from_user.id)
        await state.update_data(update=True)
        await state.set_state(SettingsState.price)
        await message.answer(text="Ok, –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")

    else:
        await state.clear()
        await message.answer(text="–ú–µ–Ω—é", reply_markup=menu)


@settings_router.message(
    F.text.isdigit(),
    SettingsState.price
)
async def ask_chart(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞."""
    await state.update_data(price=int(message.text))
    await state.set_state(SettingsState.overtime_price)

    await message.answer(
        text="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–ª–∞—Ç—É –∑–∞ –¥–æ–ø —á–∞—Å"
    )


@settings_router.message(
    F.text.isdigit(),
    SettingsState.overtime_price
)
async def ask_price_over_time(
        message: types.Message, state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–≤–æ–¥–µ
    —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ –¥–æ–ø —á–∞—Å–µ. –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥.
    """
    await state.update_data(overtime=int(message.text))
    try:
        await write_settings(await state.get_data())

    except ValueError:
        await message.answer(text="–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞((")

    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!",
        reply_markup=menu
    )
    await state.clear()
